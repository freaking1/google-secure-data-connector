# Test and Configure Apache Modules
APACHE_20_MODULES="access proxy proxy_http mime mime_magic"
APACHE_22_MODULES="authz_host proxy proxy_http mime mime_magic"
APACHECTL="_APACHE_CTL_"
MODULESDIR="_APACHE_MODULESDIR_"
TEMPLATE="/etc/opt/google-secure-data-connector/apache/httpd.conf-template"
FOUND_MODULES=""
              

   # Check version
   echo -n "checking apache version: " 
   APACHEVERSION=$(${APACHECTL} -v | grep version | awk -F/ '{print $2}' \
       | cut -c 1-3)
   if [ ${APACHEVERSION} != "2.2" -a ${APACHEVERSION} != "2.0" ]; then
     echo Apache version not correct - must be 2.0 or 2.2
     exit 1
   else 
     echo ${APACHEVERSION}
   fi

   if [ -z ${APACHECTL} ]; then
    echo "--apachectl option is missing!"
    exit 1
   fi

   if [ ! -x "${APACHECTL}" ]; then
     echo "httpd: ${APACHECTL} not found"
     exit 1
   fi


#
### Getting Apache Module list for config files.
#

if [ ${APACHEVERSION} = "2.2" ]; then
  APACHE_MODULES=${APACHE_22_MODULES}
else
  APACHE_MODULES=${APACHE_20_MODULES}
fi

#
# Checks MODULESDIR for both apache 2.0 and 2.2 style module names and
# echos the results (for use with eval).
#
# $1 module name.
# 
getPathToModuleFile ()
{
  module=$1
  if [ -e "${MODULESDIR}/mod_${module}.so" ]; then
    echo "${MODULESDIR}/mod_${module}.so"
    return 0 
 else 
    echo "Module not found"
    return 1
  fi

}

FOUND_MODULES=""
  for module in ${APACHE_MODULES}; do

    echo -n checking for statically compiled module: ${module}:
    ${APACHECTL} -l |grep -q ${module}
    if [ $? = 0 ]; then
      continue
    fi
    echo " no"

    echo -n checking dynamically compiled apache for: ${module}:
    modulepath=$(getPathToModuleFile ${module})
    if [ $? = 1 ]; then
      echo " no"
      echo "Please install module \"${module}\"."
      exit 1
    fi
    echo " yes"

    FOUND_MODULES="${FOUND_MODULES} ${module}"
  done



if [ ! -z "${FOUND_MODULES}" ]; 
then
  echo ${FOUND_MODULES}
  for module in ${FOUND_MODULES}; do  # Add modules to template
    echo Configuring load for ${module}
    moduledir=$(getPathToModuleFile ${module})
    echo "LoadModule ${module}_module ${moduledir}" >> ${TEMPLATE}
  done
fi



